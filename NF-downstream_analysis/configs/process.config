#!/usr/bin/env nextflow


params {
    modules {
        'integration' {
            publish_dir         = "seurat/1_integration"
            script              = "${baseDir}/bin/seurat/1_integration.R"
        }
        'integration_qc' {
            publish_dir         = "seurat/2_integration_qc"
            script              = "${baseDir}/bin/seurat/2_integration_qc.R"
        }
        'poor_cluster_filt' {
            publish_dir         = "seurat/3_poor_cluster_filt"
            script              = "${baseDir}/bin/seurat/3_poor_cluster_filt.R"
        }
        'sex_filt' {
            publish_dir         = "seurat/4_sex_filt"
            script              = "${baseDir}/bin/seurat/4_sex_filt.R"
        }
        'cell_cycle' {
            publish_dir         = "seurat/5_cell_cycle"
            script              = "${baseDir}/bin/seurat/5_cell_cycle.R"
        }
        'contamination_filt' {
            publish_dir         = "seurat/6_contamination_filt"
            script              = "${baseDir}/bin/seurat/6_contamination_filt.R"
        }
        'gene_modules' {
            publish_dir         = "gene_modules"
            script              = "${baseDir}/bin/other/gene_modules.R"
        }
    }
}


process {
    withName: integration {
        container = 'alexthiery/10x-npb-schelper:base-1.3'
        cpus = { check_max( 8 * task.attempt, 'cpus' ) }
        memory = { check_max( 64.GB * task.attempt, 'memory' ) }
        time = { check_max( 2.h * task.attempt, 'time' ) }
    }
    withName: integration_qc {
        container = 'alexthiery/10x-npb-schelper:base-1.3'
        cpus = { check_max( 4 * task.attempt, 'cpus' ) }
        memory = { check_max( 32.GB * task.attempt, 'memory' ) }
        time = { check_max( 2.h * task.attempt, 'time' ) }
    }
    withName: poor_cluster_filt {
        container = 'alexthiery/10x-npb-schelper:base-1.3'
        cpus = { check_max( 8 * task.attempt, 'cpus' ) }
        memory = { check_max( 64.GB * task.attempt, 'memory' ) }
        time = { check_max( 2.h * task.attempt, 'time' ) }
    }
    withName: sex_filt {
        container = 'alexthiery/10x-npb-schelper:base-1.3'
        cpus = { check_max( 8 * task.attempt, 'cpus' ) }
        memory = { check_max( 64.GB * task.attempt, 'memory' ) }
        time = { check_max( 2.h * task.attempt, 'time' ) }
    }
    withName: cell_cycle {
        container = 'alexthiery/10x-npb-schelper:base-1.3'
        cpus = { check_max( 8 * task.attempt, 'cpus' ) }
        memory = { check_max( 64.GB * task.attempt, 'memory' ) }
        time = { check_max( 2.h * task.attempt, 'time' ) }
    }
    withName: contamination_filt {
        container = 'alexthiery/10x-npb-schelper:base-1.3'
        cpus = { check_max( 8 * task.attempt, 'cpus' ) }
        memory = { check_max( 64.GB * task.attempt, 'memory' ) }
        time = { check_max( 2.h * task.attempt, 'time' ) }
    }
    withName: gene_modules {
        container = 'alexthiery/10x-npb-schelper:base-1.3'
        cpus = { check_max( 8 * task.attempt, 'cpus' ) }
        memory = { check_max( 64.GB * task.attempt, 'memory' ) }
        time = { check_max( 2.h * task.attempt, 'time' ) }
    }
}


// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if (type == 'memory') {
    try {
      if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'time') {
    try {
      if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'cpus') {
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'gpus') {
    try {
      return Math.min( obj, params.max_gpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max gpus '${params.max_gpus}' is not valid! Using default value: $obj"
      return obj as String
    }
  }
}
