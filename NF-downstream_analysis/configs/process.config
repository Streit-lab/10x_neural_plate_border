#!/usr/bin/env nextflow


params {
    modules {
        // Seurat filtering processes
        'preprocessing' {
            publish_dir         = "seurat_filtering/1_preprocessing"
        }
        'integration' {
            publish_dir         = "seurat_filtering/2_integration"
        }
        'integration_qc' {
            publish_dir         = "seurat_filtering/3_integration_qc"
        }
        'sex_filt' {
            publish_dir         = "seurat_filtering/4_sex_filt"
        }
        'cell_cycle' {
            publish_dir         = "seurat_filtering/5_cell_cycle"
        }
        'contamination_filt' {
            publish_dir         = "seurat_filtering/6_contamination_filt"
        }


        // Exploratory analysis processes for full filtered Seurat data
        'gene_modules' {
            publish_dir         = "exploratory_analysis/antler/gene_modules"
            // publish_files       = ['plots':'', 'gene_module_lists':'', 'rds_files', '']
        }
        'scatterplot3d' {
            publish_dir         = "exploratory_analysis/seurat/scatterplot3d"
        }
        'state_classification' {
            publish_dir         = "exploratory_analysis/seurat/state_classification"
        }


        // Stage split processes
        'stage_split' {
            publish_dir         = "stage_split/seurat"
            publish_files       = ['rds_files':'']
            args                = "--split stage"
        }
        'stage_cluster' {
            publish_dir         = "stage_split/seurat"
            publish_by_meta     = ['sample_id', 'stage_cluster']
        }
        'stage_gene_modules' {
            publish_dir         = "stage_split/antler"
            publish_by_meta     = ['sample_id', 'stage_gene_modules']
        }
        'stage_state_classification' {
            publish_dir         = "stage_split/seurat"
            publish_by_meta     = ['sample_id', 'stage_state_classification']
        }
        'stage_seurat_intersect_loom' {
            publish_dir         = "stage_split/scvelo/seurat_intersect_loom"
            publish_by_meta     = ['sample_id']
        }
        'stage_scvelo_run' {
            publish_dir         = "stage_split/scvelo/scvelo_run"
            args                = "-m dynamical -c seurat_clusters -s stage -b run -cc cell_colours"
            publish_by_meta     = ['sample_id']
        }


        // Run split processes
        'run_split' {
            publish_dir         = "run_split/seurat"
            publish_files       = ['rds_files':'']
            args                = "--split run"
        }
        'run_cluster' {
            publish_dir         = "run_split/seurat"
            publish_by_meta     = ['sample_id', 'run_cluster']
        }
        'run_gene_modules' {
            publish_dir         = "run_split/antler"
            publish_by_meta     = ['sample_id', 'run_gene_modules']
        }
        'run_state_classification' {
            publish_dir         = "run_split/seurat"
            publish_by_meta     = ['sample_id', 'run_state_classification']
        }
        'run_seurat_intersect_loom' {
            publish_dir         = "run_split/scvelo/seurat_intersect_loom"
            publish_by_meta     = ['sample_id']
        }
        'run_scvelo_run' {
            publish_dir         = "run_split/scvelo/scvelo_run"
            args                = "-m dynamical -c seurat_clusters -s stage -b run -cc cell_colours"
            publish_by_meta     = ['sample_id']
        }


        // Cluster subset processes
        'clusters_subset' {
            publish_dir         = "clusters_subset/seurat"
            publish_files       = ['rds_files':'']
            args                = "--groups npb,placodes,nc,delaminating_nc --meta_col scHelper_cell_type --verbose TRUE"
        }
        'clusters_cluster' {
            publish_dir         = "clusters_subset/seurat"
            publish_by_meta     = ['sample_id', 'clusters_cluster']
        }
        'clusters_gene_modules' {
            publish_dir         = "clusters_subset/antler"
            publish_by_meta     = ['sample_id', 'clusters_gene_modules']
        }
        'clusters_state_classification' {
            publish_dir         = "clusters_subset/seurat"
            publish_by_meta     = ['sample_id', 'clusters_state_classification']
        }
        'clusters_seurat_intersect_loom' {
            publish_dir         = "clusters_subset/scvelo/seurat_intersect_loom"
            publish_by_meta     = ['sample_id']
        }
        'clusters_scvelo_run' {
            publish_dir         = "clusters_subset/scvelo/scvelo_run"
            args                = "-m dynamical -c seurat_clusters -s stage -b run -cc cell_colours"
            publish_by_meta     = ['sample_id']
        }


        // scVelo processes
        'merge_loom' {
            publish_dir         = "scvelo/merge_loom"
        }
        'seurat_h5ad' {
            args                = "--assay integrated --outfile seurat --group_by seurat_clusters"
        }


        // Other
        'gene_modules_latent_time' {
            publish_dir         = "antler/gene_modules_latent_time"
        }
        'stage_gene_modules_latent_time' {
            publish_dir         = "antler/stage_split"
            publish_by_meta     = ['sample_id', 'stage_gene_modules_latent_time']
        }
    }
}


process {
    // Seurat filtering processes
    withName: PREPROCESSING {
        container = 'alexthiery/10x-npb-schelper:base-0.6'
        cpus = { check_max( 8 * task.attempt, 'cpus' ) }
        memory = { check_max( 64.GB * task.attempt, 'memory' ) }
        time = { check_max( 2.h * task.attempt, 'time' ) }
    }
    withName: INTEGRATION {
        container = 'alexthiery/10x-npb-schelper:base-0.6'
        cpus = { check_max( 8 * task.attempt, 'cpus' ) }
        memory = { check_max( 64.GB * task.attempt, 'memory' ) }
        time = { check_max( 2.h * task.attempt, 'time' ) }
    }
    withName: INTEGRATION_QC {
        container = 'alexthiery/10x-npb-schelper:base-0.6'
    }
    withName: SEX_FILT {
        container = 'alexthiery/10x-npb-schelper:base-0.6'
        cpus = { check_max( 8 * task.attempt, 'cpus' ) }
        memory = { check_max( 64.GB * task.attempt, 'memory' ) }
        time = { check_max( 2.h * task.attempt, 'time' ) }
    }
    withName: CELL_CYCLE {
        container = 'alexthiery/10x-npb-schelper:base-0.6'
        cpus = { check_max( 8 * task.attempt, 'cpus' ) }
        memory = { check_max( 64.GB * task.attempt, 'memory' ) }
        time = { check_max( 2.h * task.attempt, 'time' ) }
    }
    withName: CONTAMINATION_FILT {
        container = 'alexthiery/10x-npb-schelper:base-0.5'
        cpus = { check_max( 8 * task.attempt, 'cpus' ) }
        memory = { check_max( 64.GB * task.attempt, 'memory' ) }
        time = { check_max( 2.h * task.attempt, 'time' ) }
    }


    // Exploratory analysis processes for full filtered Seurat data
    withName: GENE_MODULES {
        container = 'alexthiery/10x-npb-schelper:base-0.6'
        cpus = { check_max( 16 * task.attempt, 'cpus' ) }
        memory = { check_max( 64.GB * task.attempt, 'memory' ) }
        time = { check_max( 2.h * task.attempt, 'time' ) }
    }
    withName: SCATTERPLOT3D {
        container = 'alexthiery/10x-npb-scatterplot3d:base-0.1'
    }
    withName: CELL_STATE_CLASSIFICATION {
        container = 'alexthiery/10x-npb-schelper:base-0.6'
    }


    // Stage split processes
    withName: STAGE_SPLIT {
        container = 'alexthiery/10x-npb-schelper:base-0.6'
    }
    withName: STAGE_CLUSTER {
        container = 'alexthiery/10x-npb-schelper:base-0.6'
    }
    withName: STAGE_GENE_MODULES {
        container = 'alexthiery/10x-npb-schelper:base-0.6'
    }
    withName: STAGE_STATE_CLASSIFICATION {
        container = 'alexthiery/10x-npb-schelper:base-0.6'
    }


    // Run split processes
    withName: RUN_SPLIT {
        container = 'alexthiery/10x-npb-schelper:base-0.6'
    }
    withName: RUN_CLUSTER {
        container = 'alexthiery/10x-npb-schelper:base-0.6'
    }
    withName: RUN_GENE_MODULES {
        container = 'alexthiery/10x-npb-schelper:base-0.6'
    }
    withName: RUN_STATE_CLASSIFICATION {
        container = 'alexthiery/10x-npb-schelper:base-0.6'
    }

    // Clusters subset processes
    withName: CLUSTERS_SUBSET {
        container = 'alexthiery/10x-npb-schelper:base-0.6'
    }
    withName: CLUSTERS_CLUSTER {
        container = 'alexthiery/10x-npb-schelper:base-0.6'
    }
    withName: CLUSTERS_GENE_MODULES {
        container = 'alexthiery/10x-npb-schelper:base-0.6'
    }
    withName: CLUSTERS_STATE_CLASSIFICATION {
        container = 'alexthiery/10x-npb-schelper:base-0.6'
    }

    // Other
    withName: GENE_MODULES_LATENT_TIME {
        container = 'alexthiery/10x-npb-schelper:base-0.6'
    }
}


// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if (type == 'memory') {
    try {
      if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'time') {
    try {
      if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'cpus') {
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'gpus') {
    try {
      return Math.min( obj, params.max_gpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max gpus '${params.max_gpus}' is not valid! Using default value: $obj"
      return obj as String
    }
  }
}
