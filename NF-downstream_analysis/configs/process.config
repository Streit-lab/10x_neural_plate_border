#!/usr/bin/env nextflow


params {
    modules {
        'integration' {
            publish_dir         = "integration"
            script              = "${baseDir}/bin/seurat/integration.R"
            args                = "--custom_functions ${baseDir}/bin/custom_functions"
        }
        'integration_qc' {
            publish_dir         = "integration_qc"
            script              = "${baseDir}/bin/seurat/integration_qc.R"
            args                = "--custom_functions ${baseDir}/bin/custom_functions"
        }
        'sexfilt' {
            publish_dir         = "sexfilt"
            script              = "${baseDir}/bin/seurat/sexfilt.R"
            args                = "--custom_functions ${baseDir}/bin/custom_functions"
        }
    }
}


process {
    withName: integration {
        container = 'alexthiery/10x-npb-seurat:base-1.5'
        cpus = { check_max( 16 * task.attempt, 'cpus' ) }
        memory = { check_max( 64.GB * task.attempt, 'memory' ) }
        time = { check_max( 2.h * task.attempt, 'time' ) }
    }
    withName: integration_qc {
        container = 'alexthiery/10x-npb-seurat:base-1.5'
        cpus = { check_max( 16 * task.attempt, 'cpus' ) }
        memory = { check_max( 64.GB * task.attempt, 'memory' ) }
        time = { check_max( 2.h * task.attempt, 'time' ) }
    }
    withName: sexfilt {
        container = 'alexthiery/10x-npb-seurat:base-1.5'
        cpus = { check_max( 16 * task.attempt, 'cpus' ) }
        memory = { check_max( 64.GB * task.attempt, 'memory' ) }
        time = { check_max( 2.h * task.attempt, 'time' ) }
    }
}


// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if (type == 'memory') {
    try {
      if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'time') {
    try {
      if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'cpus') {
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'gpus') {
    try {
      return Math.min( obj, params.max_gpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max gpus '${params.max_gpus}' is not valid! Using default value: $obj"
      return obj as String
    }
  }
}
